/*
-------------------------- *.c 常见格式 --------------------------

 //头文件
 #include...

 //全局变量
 int a,b;
 ...

 //函数声明
 void func();
 ...

 //主函数
 int main(int argc, char* argv[]){
    ...
    return 0;
 }

 //函数实现
 void func(){
    ...
 }

本CMM.jj文件中所叙述的词法语法规则，只考虑*.c文件中，main函数中的主体部分

--------------------------------------------------------------------

本CMM.jj文件中的部分语法说明：

1.声明语句与赋值语句：必须先声明，后赋值。
  如："int a; a = 1;"为正确语法，而不能使用"int a = 1;"

2.数组的赋值：由于没有只有词法与语法分析，因此数组的赋值只能先统一声明，再对单个元素赋值的方法。
  如："real[] r; r[0] = 0; r[1] = 1;"

3.if-else语句：选择语句包含两种，含else的语句，与不含else的语句。
  如："if(){}"、"if(){}else{}"、"if(){}else if(){}else{}"均为正确语句，但"if(){}else if(){}"则无法识别。

4.算数运算符不含++、--等运算符。

5.需在控制台输入文本。"#"为输入结束符。

--------------------------------------------------------------------

测试用例：
    int a, b;
    real[] r;
    a = 1;
    read(b);
    r[0] = 0;

    while(a < b){
        if(a == 3){
            r[3] = 3;
        }else if(a == 5){
            r[5] = 5;
        }else{
            r[7] = (a * 3) - (b / 3);
        }
        a = a + 1;
    }

    write(a, b, r);

    #
--------------------------------------------------------------------
*/

PARSER_BEGIN(CMMParser)

import java.util.*;

public class CMMParser{

    public static void main(String[] args) throws ParseException{
        CMMParser parser = new CMMParser(System.in);
        parser.Start();
    }
}

PARSER_END(CMMParser)

SKIP : {
    " "
    |  "\t"
    |  "\n"
    |  "\r"
    |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//定义关键字
TOKEN : {
	<IF: "if">
	| <ELSE: "else">
	| <WHILE: "while">
	| <READ: "read">
	| <WRITE: "write">
	| <INT: "int">
	| <REAL: "real">
}

//定义自然数
TOKEN : {
	<INTEGER_LITERAL: ["1"-"9"](<DIGIT>)* | "0">
}

//定义实数
TOKEN : {
	<REAL_LITERAL: (<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+>
}

//定义标识符
TOKEN : {
	<IDENTIFIER: <LETTER>
	| <LETTER>(<LETTER> | <DIGIT> | "_")*(<LETTER> | <DIGIT>)+>
	| <#LETTER: ["a"-"z", "A"-"Z"]>
	| <#DIGIT: ["0"-"9"]>
}

void Start() : {}
{
    Procedure() "#"
}

void Procedure() : {}
{
    Block() | (Statement())+
}

void Block() : {}
{
    "{" (Block() | (Statement())+)+ "}"
}

void Statement() : {}
{
    Declaration()
    | Assignment()
    | <WHILE> "(" Condition() ")" Block()
    | <READ> "(" <IDENTIFIER> ("," <IDENTIFIER>)* ")" ";"
    | <WRITE> "(" Expression() ("," Expression())* ")" ";"
    | Choice()
}

void Declaration() : {}
{
    (<INT> | <REAL>)["[]"] <IDENTIFIER> ("," <IDENTIFIER>)* ";"
}

void Assignment() : {}
{
    <IDENTIFIER> ["[" <INTEGER_LITERAL> "]"] "=" Expression() ";"
}

void Expression() : {}
{
    Term() (("+" | "-") Term())*
}

void Choice() : {}
{
    //<IF> "(" Condition() ")" Block()
    //(LOOKAHEAD([<ELSE> Block()]) (<ELSE> <IF> "(" Condition() ")" Block())* | [<ELSE> Block()])
    LOOKAHEAD(<IF> "(" Condition() ")" Block())
    (<IF> "(" Condition() ")" Block() <ELSE>)+ Block()
    | <IF> "(" Condition() ")" Block()
}

void Condition() : {}
{
    Expression() (">" | "<" | "==" | "<>" | ">=" | "<=") Expression()
}

void Term() : {}
{
    Factor() (("*" | "/") Factor())*
}

void Factor() : {}
{
    <IDENTIFIER> | <INTEGER_LITERAL> | <REAL_LITERAL> | "(" Expression() ")"
}














